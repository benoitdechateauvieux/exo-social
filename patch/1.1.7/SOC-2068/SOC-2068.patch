Index: component/core/src/main/java/org/exoplatform/social/core/space/SpaceUtils.java
===================================================================
--- component/core/src/main/java/org/exoplatform/social/core/space/SpaceUtils.java	(revision 74323)
+++ component/core/src/main/java/org/exoplatform/social/core/space/SpaceUtils.java	(working copy)
@@ -939,7 +939,8 @@
       return null;
     if (installedApps.contains(appId)) {
       String appStatusPatern = getAppStatusPattern(installedApps, appId);
-      return appStatusPatern.split(":")[1];
+      /* return appStatusPatern.split(":")[1]; */
+      return appStatusPatern.split(":")[0];
     }
     return null;
   }
Index: component/webui/src/main/java/org/exoplatform/social/webui/space/UIManageMySpaces.java
===================================================================
--- component/webui/src/main/java/org/exoplatform/social/webui/space/UIManageMySpaces.java	(revision 74323)
+++ component/webui/src/main/java/org/exoplatform/social/webui/space/UIManageMySpaces.java	(working copy)
@@ -242,9 +242,15 @@
         uiApp.addMessage(new ApplicationMessage("UIManageMySpaces.msg.group_unable_to_retrieve", null, ApplicationMessage.ERROR));
         return;
       } else {
+          /*
         String spaceUrl = Util.getPortalRequestContext().getPortalURI() + space.getUrl();
         String spaceSettingNodeName = uiMySpaces.getNodeName(space, "SpaceSettingPortlet");
         String spaceSettingUrl = spaceUrl + "/" + spaceSettingNodeName;
+           *
+           */
+        String spaceUrl = Util.getPortalRequestContext().getPortalURI();
+        String spaceSettingUri = uiMySpaces.getNodeUri(space, "SpaceSettingPortlet");
+        String spaceSettingUrl = spaceUrl + spaceSettingUri;
         PortalRequestContext prContext = Util.getPortalRequestContext();
         prContext.setResponseComplete(true);
         prContext.getResponse().sendRedirect(spaceSettingUrl);
@@ -506,7 +512,8 @@
     * @param appId
     * @throws SpaceException
     */
-   private String getNodeName(Space space, String appId) throws SpaceException {
+   /* private String getNodeName(Space space, String appId) throws SpaceException { */
+   private String getNodeUri(Space space, String appId) throws SpaceException {
 	 ExoContainer container = ExoContainerContext.getCurrentContainer() ;
 	 DataStorage dataStorage = (DataStorage)container.getComponentInstanceOfType(DataStorage.class);
      try {
@@ -521,6 +528,7 @@
        String nodeName = SpaceUtils.getAppNodeName(space, appId);
        PageNode childNode = homeNode.getChild(nodeName);
        //bug from portal, gets by nodeUri instead
+       /*
        if (childNode == null) {
          for (PageNode pageNode : homeNode.getChildren()) {
            String nodeUri = pageNode.getUri();
@@ -528,17 +536,31 @@
            if (nodeUri.equals(nodeName)) {
              childNode = pageNode;
              break;
+        *
+        */
+       if (childNode != null) {
+           return childNode.getUri();
+       } else {
+           List<PageNode> pageNodes = homeNode.getChildren();
+           for (PageNode pageNode : pageNodes) {
+               String pageReference = pageNode.getPageReference();
+               if (pageReference.contains(nodeName)) {
+                   return pageNode.getUri();
+               }
            }
-         }
-       }
+       }      
 
        // In case bug SOC-674
+       /*
        if (childNode == null) {
      	  nodeName = space.getName() + nodeName;
      	  childNode = homeNode.getChild(nodeName);
        }
 
        return nodeName;
+        *
+        */
+       return null;
      } catch (Exception e) {
        throw new SpaceException(SpaceException.Code.UNABLE_TO_REMOVE_APPLICATION, e);
      }
