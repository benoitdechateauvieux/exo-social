Index: component/core/src/main/java/org/exoplatform/social/core/space/impl/DefaultSpaceApplicationHandler.java
===================================================================
--- component/core/src/main/java/org/exoplatform/social/core/space/impl/DefaultSpaceApplicationHandler.java	(revision 76486)
+++ component/core/src/main/java/org/exoplatform/social/core/space/impl/DefaultSpaceApplicationHandler.java	(working copy)
@@ -586,7 +586,7 @@
                        org.exoplatform.portal.config.model.Application<Portlet> portletApplication,
                        Page page) {
     String visibility = space.getVisibility();
-    if (visibility.equals(Space.PUBLIC)) {
+    if (Space.PUBLIC.equals(visibility)) {
       page.setAccessPermissions(new String[] { UserACL.EVERYONE });
     } else {
       page.setAccessPermissions(new String[] { "*:" + space.getGroupId() });
Index: component/core/src/main/java/org/exoplatform/social/core/space/SpaceUtils.java
===================================================================
--- component/core/src/main/java/org/exoplatform/social/core/space/SpaceUtils.java	(revision 76486)
+++ component/core/src/main/java/org/exoplatform/social/core/space/SpaceUtils.java	(working copy)
@@ -519,6 +519,8 @@
    * @throws Exception
    */
   static public void removeNavigation(PageNavigation nav) throws Exception {
+    WebuiRequestContext context = WebuiRequestContext.getCurrentInstance();
+    if (context == null) return;
     UserPortalConfig userPortalConfig = Util.getUIPortalApplication().getUserPortalConfig();
     ExoContainer container = ExoContainerContext.getCurrentContainer();
     DataStorage dataStorage = (DataStorage) container.getComponentInstanceOfType(DataStorage.class);
@@ -563,6 +565,8 @@
     SpaceService  spaceService = (SpaceService) container.getComponentInstanceOfType(SpaceService.class);
     String userId = Util.getPortalRequestContext().getRemoteUser();
     List<Space> spaces = spaceService.getAccessibleSpaces(userId);
+    WebuiRequestContext context = WebuiRequestContext.getCurrentInstance();
+    if (context == null) return;
     UserPortalConfig userPortalConfig = Util.getUIPortalApplication().getUserPortalConfig();
     List<PageNavigation> navs = userPortalConfig.getNavigations();
     List<PageNavigation> spaceNavs = new ArrayList<PageNavigation>();
@@ -633,6 +637,8 @@
    * Updates working work space
    */
   static public void updateWorkingWorkSpace() {
+    WebuiRequestContext context = WebuiRequestContext.getCurrentInstance();
+    if (context == null) return;
     UIPortalApplication uiPortalApplication = Util.getUIPortalApplication();
     UIWorkingWorkspace uiWorkingWS = uiPortalApplication.getChildById(UIPortalApplication.UI_WORKING_WS_ID);
     PortalRequestContext pContext = Util.getPortalRequestContext();
@@ -722,6 +728,8 @@
    * @throws SpaceException with code INTERNAL_SERVER_ERROR
    */
   static public boolean isSpaceNameExisted(String spaceName) throws SpaceException {
+    WebuiRequestContext context = WebuiRequestContext.getCurrentInstance();
+    if (context == null) return false;
     List<PageNavigation> allNavs = Util.getUIPortalApplication().getUserPortalConfig().getNavigations();
     String space_Name = spaceName.replaceAll(" ", "_"); // Compares with Existing Pages
     String spacePrettyName = cleanString(spaceName); // Compares with Existing DashBoard Tabs's & Spaces's Names
