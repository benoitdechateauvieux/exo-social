h1. ActivityManager {anchor:id=Developer_document.Java_APIs.Activity_Manager}

|| Method|| Param || Return || Description ||
|*saveActivity*(Identity owner, ExoSocialActivity activity) throws ActivityStorageException |{{owner }} - the owner of activity stream, {{activity}} -  the activity which needs to be saved |ExoSocialActivity  | Saves an activity to the stream of an owner.Note that the Activity.userId will be set to the owner's identity if it has not already set.|
|*getActivity*(String activityId) throws ActivityStorageException |{{activityId}} - the id of activity| ExoSocialActivity| Gets an activity by its id.|
|*deleteActivity*(String activityId) throws ActivityStorageException |{{activityId}} - the id of activity |void |Deletes an activity by its id. |
|*deleteActivity*(ExoSocialActivity activity) throws ActivityStorageException |{{activity}} | void |Deletes a stored activity ({{{id !}}}= null). (Since 1.1.1).|
|*deleteComment*(String activityId, String commentId) throws ActivityStorageException |{{activityId}} - the id of activity, {{commentId}} - the id of comment| void | Deletes a comment by its id.|
|*getActivities*(Identity identity) throws ActivityStorageException|{{identity}} |List<ExoSocialActivity>  |Gets the latest activities by an identity with the default limit of 20 latest activities.|
|*getActivities*(Identity identity, long start, long limit) throws ActivityStorageException |{{identity}}, {{start }}, {{limit}}  | List<ExoSocialActivity> |Gets the latest activities by an identity, specifying *start* that is an offset index and *limit*. |
|*getActivitiesOfConnections*(Identity ownerIdentity) throws ActivityStorageException | {{ownerIdentity}} |List<ExoSocialActivity> |Gets activities of connections from an identity. The activities are returned as a list that is sorted descending by activity posted time.. (Since 1.1.1).|
|*getActivitiesOfConnections*(Identity ownerIdentity, int offset, int limit) throws ActivityStorageException;| {{ownerIdentity, offset, limit}} |List<ExoSocialActivity>|Gets the activities of connections from an identity by specifying offset and limit. The activities are returned as a list that is sorted starting from the most recent activity.(Since 1.2.0-GA).|
|*getActivitiesOfUserSpaces*(Identity ownerIdentity)| {{ownerIdentity}} |List<ExoSocialActivity> |Gets the activities from all spaces of a user. By default, the activity list is composed of all spaces' activities. Each activity list of the space contains maximum 20 activities and are sorted by time. (Since 1.1.1).|
|*getActivityFeed*(Identity identity) throws ActivityStorageException | {{identity}} |List<ExoSocialActivity> |Gets the activity feed of an identity. This feed is the combination of all the activities of his own activities, his connections' activities and spaces' activities which are returned as a list that is sorted starting from the most recent activity.(Since  1.1.2).|
|*saveActivity*(ExoSocialActivity activity) throws ActivityStorageException | {{ activity}} - the activity to save|ExoSocialActivity |Saves an activity into the stream for the activity's userId. The userId must be set and this field is used to indicate the owner stream.|
|*saveComment*(ExoSocialActivity activity, ExoSocialActivity comment) throws ActivityStorageException | {{activity, comment}} |void |Saves a new comment or updates an existing comment that is an instance of activity with mandatory fields: userId, title.|
|*saveLike*(ExoSocialActivity activity, Identity identity) throws ActivityStorageException | {{activity, identity }} |void|Saves an identity who likes an activity.|
|*removeLike*(ExoSocialActivity activity, Identity identity) throws ActivityStorageException | {{ activity}}, {{identity}} - a user who dislikes an activity |void|Removes an indentity who likes an activity, if this activity is liked, it will be removed.|
|*getComments*(ExoSocialActivity activity) throws ActivityStorageException | {{activity}} |List<ExoSocialActivity>| Gets the comment list of an activity.|
|*recordActivity*(Identity owner, String type, String title) throws ActivityStorageException | {{owner, type, title }} |ExoSocialActivity |Records an activity. (Since 1.2.0-GA).|
|*recordActivity*(Identity owner, ExoSocialActivity activity) throws Exception | {{owner, activity }} |ExoSocialActivity |Saves an activity. Deprecated: use ActivityManager#saveActivity(org.exoplatform.social.core.identity.model.Identity, org.exoplatform.social.core.activity.model.ExoSocialActivity) instead. It will be removed by 1.3.x.|
|*recordActivity*(Identity owner, String type, String title, String body) throws ActivityStorageException | {{ owner}} - the owner of the target stream for this activity, {{type}} - the type of an activity which will be used to render a custom ui, {{title}} - the title, {{body}} - the body |ExoSocialActivity |Records an activity.|
|*addProcessor*(ActivityProcessor processor) | {{processor }} |void|Adds a new processor.|
|*addProcessorPlugin*(BaseActivityProcessorPlugin plugin) | {{plugin}} |void|Adds a new processor plugin.|
|*getActivitiesCount*(Identity owner) throws ActivityStorageException | {{owner }} | int|Gets the number of activities from a stream owner.|
|*processActivitiy*(ExoSocialActivity activity) | {{activity}} |void|Passes an activity through the chain of processors.|

h1. IdentityManager {anchor:id=Developer_document.Java_APIs.Identity_Manager}

|| Method || Param || Return || Description ||
|*getOrCreateIdentity*(String providerId, String remoteId, boolean forceLoadOrReloadProfile)|{{providerId}} - the Id of the provider, {{remoteId}} - the Id of the remote user, {{forceLoadOrReloadProfile}} - force to load or reload a profile or not | Identity |Get or create an identity object provided by an identity provider.|
|*getIdentity*(String identityId, boolean forceLoadOrReloadProfile) |{{identityId}},{{forceLoadOrReloadProfile}} - force to load or reload a profile or not|Identity|Get the stored identity by its identity Id which is its UUID stored by JCR.|
|*updateIdentity*(Identity identity) |{{identity}} - the exiting identity to be updated|Identity|Update the existing identity's properties. (Since 1.2.0-GA).|
|*deleteIdentity*(Identity identity) |{{identity}} - the existing identity to be deleted|void|Delete an existing identity.|
|*getConnectionsWithListAccess*(Identity identity)|{{identity}} - the provided identity|ListAccess<Identity>|Get a list of connections with the input identity. The returned result stored in a list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.2.0-GA).|
|*getProfile*(Identity identity) |{{identity}} - the provided identity|Profile|Get a profile associated with a provided identity.|
|*updateProfile*(Profile existingProfile)|{{existingProfile}} - the existing profile to be updated|void|Update an existing profile. (Since 1.2.0-GA).|
|*getIdentitiesByProfileFilter*(String providerId, ProfileFilter profileFilter, boolean forceLoadOrReloadProfile)|{{providerId}} - the provider name Id, {{profileFilter}} - the profile filter, {{forceLoadOrReloadProfile}} - force to load or reload a profile or not|ListAccess<Identity>| Get a list of identities by the input condition that is a Profile Filter Object. The returned result is contained in a list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.2.0-GA).|
|*addIdentityProvider*(IdentityProvider<?> identityProvider) |{{identityProvider}} - an identity provider|void|Add an identity provider to an identity manager.|
|*removeIdentityProvider*(IdentityProvider<?> identityProvider) |{{identityProvider}} - the existing identity provider|void|Remove an existing identity provider. (Since 1.2.0-GA).|
|*registerProfileListener*(ProfileListenerPlugin profileListenerPlugin) |{{profileListenerPlugin}} - a profile listener plugin|void|Register a profile listener plugin by an external component plugin mechanism. (Since 1.2.0-GA).|
|*registerIdentityProviders*(IdentityProviderPlugin plugin)|{{plugin}}|void|Register one or more IdentityProvider through an IdentityProviderPlugin.|
|*getIdentity*(String id) | {{id}} can be a social GlobalId or a raw identity such as in Identity.getId() |Identity - null if nothing is found, or the Identity object | Get the identity by Id and load his profile. Deprecated: You should use etIdentity(String, boolean) instead. This method will be removed in eXo Social 1.3.x.|
|*getOrCreateIdentity*(String providerId, String remoteId) | {{providerId}} - the Id of provider, {{remoteId}} - the Id of the remote user | Identity | Get the identity by remoteId. If the provider cannot find any identity by remoteId, the return value is null. If no identity found by identity provider and that identity is still stored on JCR, that stored identity will be deleted and the return value is null. Deprecated: You should use getOrCreateIdentity(String, String, boolean) instead. It will be removed in eXo Social 1.3.1.|
|*getIdentitiesByProfileFilter*(String providerId, ProfileFilter profileFilter) throws Exception | {{providerId}} - the Id of provider, {{profileFilter}} - the filter of provider |Identity| Get the identities by a profile filter. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter, boolean) instead. It will be removed in eXo Social 1.3.x. |
|*getIdentitiesByProfileFilter*(String providerId, ProfileFilter profileFilter, long offset, long limit) throws Exception | {{providerId, profileFilter, offset, limit}} | List<Identity>  | Get the identities by a profile filter. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter, boolean) instead. It will be removed in eXo Social 1.3.x. |
|*getIdentitiesByProfileFilter*(ProfileFilter profileFilter) throws Exception | {{profileFilter}} - the profile filter | List<Identity> | Get the identities by a profile filter. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter, boolean) instead. It will be removed in eXo Social 1.3.x. |
|*getIdentitiesByProfileFilter*(ProfileFilter profileFilter, long offset, long limit) throws Exception | {{providerId, profileFilter, offset, limit}} | List<Identity>  |Get the identities by a profile filter. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter, boolean)} instead. It will be removed in eXo Social 1.3.x. |
|*getIdentitiesFilterByAlphaBet*(String providerId, ProfileFilter profileFilter) throws Exception | {{providerId}} - the id of provider, {{profileFilter}} - the profile filter |  List<Identity>  | Get the identities filter by alphabet. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter,boolean) instead. It will be removed in eXo Social 1.3.x. |
|*getIdentitiesFilterByAlphaBet*(String providerId, ProfileFilter profileFilter, long offset,long limit) throws Exception| {{providerId, profileFilter, offset, limit}}|List<Identity>| Get the identities filter by alphabet with offset and limit. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter, boolean) instead. It will be removed in eXo Social 1.3.x.|
|*getIdentitiesFilterByAlphaBet*(ProfileFilter profileFilter) throws Exception| {{profileFilter}} - the profile filter |List<Identity> | Get the identities filter by alphabet. Deprecated: You should use getIdentitiesByProfileFilter(String, ProfileFilter, boolean)instead. It will be removed in eXo Social 1.3.x. |
|*getIdentity*(String providerId, String remoteId, boolean loadProfile) | {{providerId}}, {{remoteId}}, {{loadProfile}} | Identity | Get the identity from the provider, but not in JCR. Deprecated: To make sure to get the info from JCR for loading the latest profile, you should use getOrCreateIdentity(String, String, boolean) instead. It will be removed in eXo Social 1.3.x.|
|*getIdentitiesCount*(String providerId)| {{providerId}} |long| Get the number of identities. Deprecated: It will be removed in eXo Social 1.3.x.|
|*identityExisted*(String providerId, String remoteId) | {{providerId}}, {{remoteId}} | boolean | Check if the identity already exists or not. Deprecated: It will be removed in eXo Social 1.3.x.|
|*saveIdentity*(Identity identity) | {{identity}} - the identity | void | Save the identity. Deprecated: You should use getOrCreateIdentity(String, String, boolean) instead. It will be removed in eXo Social 1.3.x.|
|*saveProfile*(Profile profile)| {{profile}} | void | Save a profile. Deprecated: You should use updateProfile(Profile) instead. It will be removed in eXo Social 1.3.x.|
|*addOrModifyProfileProperties*(Profile profile) throws Exception| {{profile}}|void | Add or modify properties of profile. The profile parameter only contains the property which you want to add or modify. NOTE: The method will not delete the properties of an old profile when the param profile does not have those keys. Deprecated: It will be removed in eXo Social 1.3.x.|
|*updateAvatar*(Profile p) | {{profile}} | void | Update the avatar. Deprecated: It will be removed in eXo Social 1.3.x.|
|*updateBasicInfo*(Profile p) throws Exception | {{profile}} | void | Update the basic information. Deprecated: It will be removed in eXo Social 1.3.x. |
|*updateContactSection*(Profile p) throws Exception | {{profile}} | void | Update the contact section of the profile. Deprecated: It will be removed in eXo Social 1.3.x. |
|*updateExperienceSection*(Profile p)throws Exception | {{profile}}  | void | Update the experience section of the profile. Deprecated: It will be removed in eXo Social 1.3.x. |
|*updateHeaderSection*(Profile p) throws Exception | {{profile}} | void | Update the header section of the profile. Deprecated: It will be removed in eXo Social 1.3.x. |
|*getIdentities*(String providerId) throws Exception | {{providerId}} - the Id of provider | List<Identity>  | Get the identities by the provider Id. Deprecated: You should use getIdentities(String, boolean) instead. It will be removed in eXo Social 1.3.x.|
|*getIdentities*(String providerId, boolean loadProfile)| {{providerId}} - the Id of provider, {{loadProfile}} - the loaded profile. |List<Identity>  | Get the identities by the provider Id. If loadProvider is true, loading the profile will be performed. Deprecated: You should use getIdentities(String, boolean)} instead. It will be removed in eXo Social 1.3.x.|
|*getConnections*(Identity ownerIdentity) throws Exception| {{ownerIdentity}} | List<Identity> | Get connections of an identity. Deprecated: You should use getConnectionsWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.1.1). |
|*getIdentityStorage*() | {{N/A}} | IdentityStorage  | Get the identity storage. Deprecated: It will be removed in eXo Social 1.3.x. |
|*getStorage*() | {{ N/A}} | IdentityStorage  |Get the storage. Deprecated: You should use method getIdentityStorage(). It will be removed in eXo Social 1.3.x. |
|*registerProfileListener*(ProfileListener listener) | {{listener}} | void | Register the profile listener.  Deprecated: It will be removed in eXo Social 1.3.x. |
|*unregisterProfileListener*(ProfileListener listener) | {{ listener}}| void | Unregister the profile listener. Deprecated: It will be removed in eXo Social 1.3.x. |
|*addProfileListener*(ProfileListenerPlugin plugin) | {{plugin}} | void | Register a profile listener component plug-in. Deprecated: You should use registerProfileListener(ProfileListenerPlugin) instead. It will be removed in eXo Social 1.3.x. |




h1. RelationshipManager {anchor:id=Developer_document.Java_APIs.Relationship_manager}

|| Method || Param || Return || Description ||
|*get*(String relationshipId)|{{relationshipId}}|Relationship|Get a relationship by its Id. (Since 1.2.0-GA).|
|*get*(Identity identity1, Identity identity2)|{{identity1, identity2}}|Relationship|Get a relationship between 2 identities. (Since 1.2.0-GA).|
|*update*(Relationship existingRelationship)|{{existingRelationship}}|void|Update an existing relationship. (Since 1.2.0-GA).|
|*delete*(Relationship existingRelationship)|{{existingRelationship}}|void|Delete an existing relationship. (Since 1.2.0-GA).|
|*invite*(Identity invitingIdentity, Identity invitedIdentity)|{{invitingIdentity, invitedIdentity}}|void|Invite one identity to connect with another identity. The first argument must be the sender identity. The second argument must be the identity who is invited to connect. One identity is not allowed to invite himself to connect. (Since 1.3.0-GA).|
|*inviteToConnect*(Identity invitingIdentity, Identity invitedIdentity)|{{invitingIdentity, invitedIdentity}}|void|Invite one identity to connect with another identity. The first argument must be the sender identity. The second argument must be the identity who is invited to connect. One identity is not allowed to invite himself to connect. (Since 1.2.0-GA).|
|*confirm*(Identity invitedIdentity, Identity invitingIdentity)|{{invitedIdentity, invitingIdentity}}|void|Accept the connection invitation of an inviting identity. The invited identity is not allowed to confirm if he is not invited to connect. (Since 1.2.0-GA). |
|*deny*(Identity invitedIdentity, Identity invitingIdentity)|{{invitedIdentity, invitingIdentity}}|void|Deny the connection invitation of to an inviting identity. The invited identity is not allowed to deny if he is not invited to connect. (Since 1.2.0-GA). |
|*ignore*(Identity invitedIdentity, Identity invitingIdentity)|{{invitedIdentity, invitingIdentity}}|void|Ignore the connection invitation of an inviting identity. If the invited identity ignores the inviting identity, the inviting identity cannot invite this invited identity any more. (Since 1.2.0-GA).|
|*getConnections*(Identity existingIdentity)|{{existingIdentity}}|ListAccess<Identity>|Get a list of identities who are connected with the provided identity. The returned result is contained in the list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.2.0-GA).|
|*getIncoming*(Identity existingIdentity)|{{existingIdentity}}|ListAccess<Identity>|Get a list of identities who are invited to connect to the provided identity. The returned result is contained in the list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.3.0-GA).|
|*getIncomingWithListAccess*(Identity existingIdentity)|{{existingIdentity}}|ListAccess<Identity>|Get a list of identities who are invited to connect to the provided identity. The returned result is contained in the list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.2.0-GA).|
|*getOutgoing*(Identity existingIdentity)|{{existingIdentity}}|ListAccess<Identity>|Get a list of identities who are invited to connect by the provided identity. The returned result is contained in the list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.2.0-GA).|
|*getAll*(Identity existingIdentity)|{{existingIdentity}}|ListAccess<Identity>|Get identities who are connected or invited by the provided identity. The returned result is contained in the list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.3.0-GA).|
|*getAllWithListAccess*(Identity existingIdentity)|{{existingIdentity}}|ListAccess<Identity>|Get identities who are connected or invited by the provided identity. The returned result is contained in the list with the "ListAccess" type, so it can be loaded with the input indexes. (Since 1.2.0-GA).|
|*getStatus*(Identity identity1, Identity identity2)|{{identity1, identity2}}|Relationship.Type|Get the relationship status between 2 identities. (Since 1.2.0-GA).|
|*invite*(Identity sender, Identity receiver) throws RelationshipStorageException|{{sender, receiver}}|Relationship|Create a connection invitation between 2 identities. Deprecated: You should use inviteToConnect(Identity, Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getRelationshipById*(String id) throws RelationshipStorageException|id|Relationship|Get the relationship by Id. Deprecated: You should use get(String) instead. It will be removed in eXo Social 1.3.x.|
|*save*(Relationship relationship) throws RelationshipStorageException|relationship|void|Save a relationship. Deprecated: You should use the inviteToConnect() method first, and then the confirm() method instead. It will be removed in eXo Social 1.3.x.|
|*confirm*(Relationship relationship) throws RelationshipStorageException| {{relationship}} - a pending relationship | void | Mark a relationship as confirmed. Deprecated: You should use confirm(Identity, Identity)instead. It will be removed in eXo Social 1.3.x.|
|*deny*(Relationship relationship) throws RelationshipStorageException| {{relationship}} - a pending relationship | void | Deny a relationship. Deprecated: You should use deny(Identity, Identity) instead. It will be removed in eXo Social 1.3.x. |
|*remove*(Relationship relationship) throws RelationshipStorageException| {{relationship}} - a pending relationship | void | Remove a relationship. Deprecated: You should use delete(Relationship) instead. It will be removed in eXo Social 1.3.x. |
|*ignore*(Relationship relationship) throws RelationshipStorageException| {{relationship}} - a pending relationship | void | Mark a relationship as ignored. Deprecated: You should use ignore(Identity, Identity) instead. It will be removed in eXo Social 1.3.x. |
|*getPendingRelationships*(Identity identity) throws Exception | {{identity}} | List<Relationship> | Get all the pending relationships of an identity. Deprecated: You should use getIncoming(Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getPendingRelationships*(Identity identity, boolean toConfirm) throws RelationshipStorageException| {{identity}}, {{toConfirm}} | List<Relationship> | Get pending relations in 2 cases. If toConfirm is true, it returns a list of pending relationships received, but not confirmed. If toConfirm is false, it returns a list of relationships sent, but not confirmed yet. Deprecated: When toConfirm=true, use getIncoming(Identity) instead. When toConfirm=false, use getOutgoing(Identity) instead. It will be removed in eXo Social 1.3.x. |
|*getPendingRelationships*(Identity currIdentity, List<Identity> identities, boolean toConfirm) throws RelationshipStorageException|{{currIdentity}}, {{identities}}, {{toConfirm}} | List<Relationship> | Get pending relations in 2 cases. If toConfirm is true, it returns a list of pending relationships received, but not confirmed. If toConfirm is false, it returns a list of relationships sent, but not confirmed yet. Deprecated: When toConfirm=true, use getIncoming(Identity) instead. When toConfirm=false, use getOutgoing(Identity) instead. It will be removed in eXo Social 1.3.x. |
|*getContacts*(Identity currIdentity, List<Identity> identities) throws RelationshipStorageException|{{currIdentity}}, {{identities}}|List<Relationship>|Get contacts that match the search result. Deprecated: You should use getConnections(Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getContacts*(Identity identity) throws RelationshipStorageException|{{identity}}|List<Relationship>|Get the contacts. Deprecated: You should use getConnections(Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getAllRelationships(Identity identity) throws RelationshipStorageException|{{identity}}|List<Relationship>|Return all the relationships associated with a given identity. Deprecated: You should use getAllWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getRelationshipsByIdentityId*(String id) throws RelationshipStorageException|{{id}}|List<Relationship>|Return all the relationships associated with a given identityId. Deprecated: You should use getAllWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getIdentities*(Identity id) throws Exception|{{id}}|List<Identity>|Return all the relationships associated with a given identity. Deprecated: You should use getAllWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x.|
|*create*(Identity sender, Identity receiver)|{{sender, receiver}}|Relationship|Create a relationship. Deprecated: You should use invite(Identity, Identity) instead. It will be removed in eXo Social 1.3.x.|
|*saveRelationship*(Relationship relationship) throws RelationshipStorageException|{{relationship}}|void|Save a relationship. Deprecated: You should use update(Relationship) instead. It will be removed in eXo Social 1.3.x.|
|*findRoute*(Identity sender, Identity receiver) throws RelationshipStorageException|{{sender, receiver}}|List|Find the route of connection request: who made the request and who received the request. Deprecated: You should use get(Identity, Identity) instead. It will be removed in eXo Social 1.3.x.|
|*getRelationship*(Identity sender, Identity receiver) throws RelationshipStorageException|{{sender, receiver}}|Relationship|Get the relationship. Deprecated: You should use get(Identity, Identity) instead. It will be removed in eXo Social 1.3.x.|
|*findRelationships*(Identity ownerIdentity, Relationship.Type relationshipType) throws RelationshipStorageException|{{ownerIdentity, relationshipType}}|List<Identity>|Find any identities having relationshipType with the ownerIdentity. Deprecated: You should use getIncoming(Identity) or getOutgoing(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1). |
|*getRelationshipStatus*(Relationship rel, Identity id)|{{rel, id}}|Relationship.Type|Get the relationship status of the identity (sender or receiver) associated with a given relationship. Deprecated: This method is no longer used to get the relationship, you should use getIncoming(), getOutgoing() instead. It will be removed in eXo Social 1.3.x.|
|*getConnectionStatus*(Identity fromIdentity, Identity toIdentity) throws Exception|{{fromIdentity, toIdentity}}|Relationship.Type|Get connection status. Deprecated: You should use getStatus(Identity, Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.1.1).|
|*getPending*(Identity sender) throws RelationshipStorageException|{{sender}}|List<Relationship>|Get all the pending relationships of the sender. Deprecated: You should use getIncoming(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getPending*(Identity sender, List<Identity> identities) throws RelationshipStorageException|{{sender,identities}}|List<Relationship> |Get the pending relationships of the sender that match with identities. Deprecated: You should use getIncomingWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getIncoming*(Identity receiver) throws RelationshipStorageException|{{receiver}}| List<Relationship>|Get a list of required validation relationships of the receiver. Deprecated: You should use getIncomingWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getIncoming*(Identity receiver, List<Identity> identities) throws RelationshipStorageException|{{receiver, identities}}|List<Relationship>|Get a list of required validation relationships of the receiver that match with identities. Deprecated: You should use getIncomingWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1)|
|*getConfirmed*(Identity identity) throws RelationshipStorageException|{{identity}}|List<Relationship>|Get a list of confirmed relationship of identity. Deprecated: You should use getConnections(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getConfirmed*(Identity identity, List<Identity> identities) throws RelationshipStorageException|{{identity, identities}}|List<Relationship>|Get a list of confirmed relationships of the identity that match with identities. Deprecated: You should use getConnections(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getAll*(Identity identity) throws RelationshipStorageException|{{identity}}|List<Relationship>|Return all the relationships of a given identity with another identity. Deprecated: You should use getAllWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getAll*(Identity identity, List<Identity> identities) throws RelationshipStorageException|{{identity, identities}}|List<Relationship>|Return all the relationships of a given identity with another identity in identities. Deprecated: You should use getAllWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|
|*getAll*(Identity identity, Relationship.Type type, List<Identity> identities) throws RelationshipStorageException|{{identity, type, identities}}| List<Relationship> |Return all the relationships of a given identity with another identity in identities. Deprecated: You should use getAllWithListAccess(Identity) instead. It will be removed in eXo Social 1.3.x. (Since 1.2.0-Beta1).|


h1. SpaceService {anchor:id=Developer_document.JavaAPIs.Java_APIs.SpaceService}

|| Method || Param || Return || Description ||
|*getAllSpaces*() throws SpaceException|{{N/A}}|List<Space> - list of spaces in Social|Gets all spaces in Social.|
|*getSpaceByDisplayName*(String spaceDisplayName) throws SpaceException|{{spaceDisplayName}}|Space|Gets a space by its display name. (Since 1.2.0-GA).|
|*getSpaceByName*(String spaceName) throws SpaceException|{{spaceName}}|Space|Gets a space by its name. Deprecated: Use SpaceService#getSpaceByPrettyName(String) instead. It will be removed at 1.3.x|
|*getSpaceByPrettyName*(String spaceName) throws SpaceException | {{spaceName}}| Space | Gets a space by its name. (Since 1.2.0-GA).|
|*getSpacesByFirstCharacterOfName*(String firstCharacterOfName) throws SpaceException|{{firstCharacterOfName}}|  List<Space> - all spaces which have first character of name matched the input string.|Gets all spaces has the name starting with the input character.|
|*getSpacesBySearchCondition*(String condition) throws Exception|{{condition}} - the input condition| List<Space> - a list of spaces|Gets all spaces which has the name or the description that matches the input condition.|
|*getSpaceById*(String spaceId) throws SpaceException|{{spaceId}} - Id of that space|Space - space with the id specified|Gets a space by its id.|
|*getSpaceByUrl*(String spaceUrl) throws SpaceException|{{spaceUrl}} - url of space|Space - the space with string url specified|Gets a space by its url.|
|*getSpaces*(String userId) throws SpaceException|{{userId}} - Id of the user| List<Space> - all spaces of a user in which the user is a member|Gets spaces of a user in which that user is a member.|
|*getAccessibleSpaces*(String userId) throws SpaceException|{{userId}}| List<Space> - list of spaces|Gets spaces of a user which that user has the access permission|
|*getEditableSpaces*(String userId) throws SpaceException|{{userId}}| List<Space> - list of space|Gets spaces of a user which that user has the edit permission.|
|*getInvitedSpaces*(String userId) throws SpaceException|{{userId}}|  List<Space> - spaces list of all user's invited spaces|Gets a user's invited spaces and that user can accept or deny the request.|
|*getPublicSpaces*(String userId) throws SpaceException|{{userId - Id of user}}|List<Space> - spaces list in which the user can request to join|Gets a user's public spaces and that user can request to join.|
|*getPendingSpaces*(String userId) throws SpaceException|{{userId}}|  List<Space> -  spaces list in which the user can revoke that request|Gets a user's pending spaces and that the user can revoke that request.|
|*createSpace*(Space space, String creator) throws SpaceException|{{space, creator}}|Space - the created space|Creates a new space by creating a new group.This new group will be under */Spaces* node.This is shorthand for calling createSpace(space, creator, null).|
|*createSpace*(Space space, String creator, String groupId) throws SpaceException|{{space, creator,  groupId}} - if groupId == null: create a new space by creating a new group|space|Creates a new space from an existing group.|
|*saveSpace*(Space space, boolean isNew) throws SpaceException|{{space}} - space is saved,  {{isNew}} - true if creating a new space, otherwise, update an existing space.|void|Saves a new space or updates a space.|
|*deleteSpace*(Space space) throws SpaceException|{{space}} - the space is deleted|void|Deletes a space. When deleting a space, all of its page navigations and its group will be deleted.|
|*deleteSpace*(String spaceId) throws SpaceException|{{ spaceId}}|void|Deletes a space by its id.|
|*initApp*(Space space) throws SpaceException|{{space}}|void|Initializes default applications in a space. Deprecated: Use *initApps*(Space) instead.|
|*initApps*(Space space) throws SpaceException|{{space}}|void|Initializes default applications in a space. Set *space.homeNodeApp* from the configuration file to be the root page of that space node. When removing a space, make sure to call *deInitApps*(Space) and then deleteSpace(Space) or *deleteSpace*(String)|
|*deInitApps*(Space space) throws SpaceException|{{space }}| void |De-initializes the applications of a space.Make sure to call this method before *deleteSpace*(Space) or *deleteSpace*(String). Otherwise, the space is deleted but its pages and navigation still exists.|
|*addMember*(Space space, String userId) throws SpaceException|{{space, userId}}|void|Adds a user to a space, the user will get the "member" role in a space|
|*addMember*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|void|Adds a user to a space, the user will get the "member" role in a space|
|*removeMember*(Space space, String userId) throws SpaceException|{{space, userId}}|void|Removes a member from a space. If the member is the only leader of that space, the member removed is not allowed and throws *SpaceException* with Code = USER_ONLY_LEADER.|
|*removeMember*?(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|void|Removes a member from a space.|
|*getMembers*(Space space) throws SpaceException|{{space}}| List<String> - a list of the space members|Gets a list of the space members from a space.|
|*getMembers*(String spaceId) throws SpaceException|{{spaceId}}| List<String> - a list of the space members| Gets a list of the space members from a space.|
|*setLeader*(Space space, String userId, boolean isLeader) throws SpaceException|{{space, userId, isLeader }}|void|Sets a member of a space as a manager.|
|*setLeader*(String spaceId, String userId, boolean isLeader) throws SpaceException|{{spaceId, userId, isLeader}}|void|Sets a member of a space as a manager.|
|*isLeader*(Space space, String userId) throws SpaceException|{{space, userId}}|boolean - true if that the user is a leader, otherwise, false|Checks whether a user is a space's leader or not.|
|*isLeader*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolean - true if that user is a leader, otherwise, false|Checks whether a user is a space's leader or not.|
|*isOnlyLeader*(Space space, String userId) throws SpaceException|{{space, userId}}|boolean - true if that user is the only leader of the space, otherwise, false|Checks whether a user is the only leader of a space or not.|
|*isOnlyLeader*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolean|Checks whether a user is the only leader of a space or not.|
|*isMember*(Space space, String userId) throws SpaceException|{{space, userId}}| boolean - true if that user is a member, otherwise, false|Checks whether a user is a space's member or not.|
|*isMember*(String spaceId, String userId) throws SpaceException|{{spaceId, userId, }}| boolean - true if that user is a member, otherwise,false|Checks whether a user is a space's member or not.|
|*hasAccessPermission*(Space space, String userId) throws SpaceException|{{space, userId}}|boolean -  true If the user is root or the space's member.|Checks if a user can access a space or not.|
|*hasAccessPermission*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolean - true If the user is root or the space's member|Checks if a user can access a space or not.|
|*hasEditPermission*(Space space, String userId) throws SpaceException|{{space, userId}}|boolen - true If the user is root or the space's manager|Checks if a user can have the edit permission of a space or not.|
|*hasEditPermission*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolen - true If user is root or the space's manager|Checks if a user can have the edit permission of a space or not.|
|*isInvited*(Space space, String userId) throws SpaceException|{{space, userId}}|boolen - true if that user is in the invited list, otherwise, false|Checks if a user is in the invited list of a space or not.|
|*isInvited*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolen - true if the user is in the invited list, otherwise, false|Checks if a user is in the invited list of a space or not.|
|*isPending*(Space space, String userId) throws SpaceException|{{space, userId}}|boolen - true if that user is in the pending list, otherwise, false|Checks if a user is in the pending list of a space or not.|
|*installApplication*(String spaceId, String appId) throws SpaceException|{{spaceId, appId}}|void|Installs an application to a space.|
|*installApplication*(Space space, String appId) throws SpaceException|{{space, appId}}|void | Installs an application to a space|
|*activateApplication*(Space space, String appId) throws SpaceException|{{space, appId}}| void| Activates an installed application in a space.|
|*activateApplication*(String spaceId, String appId) throws SpaceException|{{spaceId, appId}}|void|Activates an installed application in a space.|
|*deactivateApplication*(Space space, String appId) throws SpaceException|{{space, appId}}|void |Deactivates an installed application in a space.|
|*deactivateApplication*(String spaceId, String appId) throws SpaceException|{{spaceId, appId}}|void|Deactivates an installed application in a space.|
|*removeApplication*(Space space, String appId, String appName) throws SpaceException|{{space, appId, appName}}| void|Removes an installed application from a space.|
|*removeApplication*(String spaceId, String appId, String appName) throws SpaceException|{{space, appId, appName}}|void|Removes an installed application from a space.|
|*requestJoin*(Space space, String userId) throws SpaceException|{{space, userid}}|  void |Requests a user to join a space, adds that user to the pending list of the space.|
|*requestJoin*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Requests a user to join a space, adds that user to the pending list of the space.|
|*revokeRequestJoin*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Revokes a join request after users request to join a group and is in the pending status.|
|*revokeRequestJoin*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Revokes a request to join a space.|
|*inviteMember*(Space space, String userId) throws SpaceException|{{space, userid}}| void |Invites a userId to become a member of a space.|
|*inviteMember*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Invites a userId to a be member of a space.|
|*revokeInvitation*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Revokes an invitation. Removes a user from the invited  member list of the space.|
|*revokeInvitation*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Revokes an invitation. Removes a user from the invited  member list of the space.|
|*acceptInvitation*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Accepts an invitation and moves a user from the invited list to the member list.|
|*acceptInvitation*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Accepts an invitation and moves a user from the invited list to the member list.|
|*denyInvitation*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Denies an invitation and removes a user from the invited list.|
|*denyInvitation*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Denies an invitation and removes a user from the invited list.|
|*validateRequest*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Validates a request and moves a user from the pending list to the member list.|
|*validateRequest*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Validates a request and moves a user from the pending list to the member list.|
|*declineRequest*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Declines a request and removes a user from  the pending list.|
|*declineRequest*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Declines a request and removes a user from  the pending list.|
|*registerSpaceLifeCycleListener*(SpaceLifeCycleListener listener|{{listener}}|void|Registers a space lifecycle listener.|
|*unregisterSpaceLifeCycleListener*(SpaceLifeCycleListener listener)|{{listener}}|void|Unregisters a space lifecycle listener.|
|*setPortletsPrefsRequired*(PortletPreferenceRequiredPlugin portletPrefsRequiredPlugin)|{{portletPrefsRequiredPlugin}}|void| Sets the portlet preferences got from the plug-in configuration.|
|*getPortletsPrefsRequired*()|{{N/A}}|String|Gets the portlet preferences required to use in creating the portlet application.|
|*setSpaceApplicationConfigPlugin*(SpaceApplicationConfigPlugin spaceApplicationConfigPlugin)|{{SpaceApplicationConfigPlugin}}|void|Sets configuration plugin for initializing applications when creating a new space. (Since 1.2.0-GA.|
|*getSpaceApplicationConfigPlugin*()|{{N/A}}|SpaceApplicationConfigPlugin|Gets the configuration of applications to be initialized when creating a new space. (Since 1.2.0-GA).|


